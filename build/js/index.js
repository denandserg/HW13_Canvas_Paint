"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 1.12.7

/*

MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
(function () {
  'use strict';

  var bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  };

  (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define([], function () {
        return root.i18n = factory();
      });
    } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && module.exports) {
      return module.exports = factory();
    } else {
      return root.i18n = factory();
    }
  })(typeof self !== "undefined" && self !== null ? self : this, function () {
    var Translator, i18n, translator;

    Translator = function () {
      function Translator() {
        this.translate = bind(this.translate, this);
        this.data = {
          values: {},
          contexts: []
        };
        this.globalContext = {};
      }

      Translator.prototype.translate = function (text, defaultNumOrFormatting, numOrFormattingOrContext, formattingOrContext, context) {
        var defaultText, formatting, isObject, num;

        if (context == null) {
          context = this.globalContext;
        }

        isObject = function isObject(obj) {
          var type;
          type = _typeof(obj);
          return type === "function" || type === "object" && !!obj;
        };

        if (isObject(defaultNumOrFormatting)) {
          defaultText = null;
          num = null;
          formatting = defaultNumOrFormatting;
          context = numOrFormattingOrContext || this.globalContext;
        } else {
          if (typeof defaultNumOrFormatting === "number") {
            defaultText = null;
            num = defaultNumOrFormatting;
            formatting = numOrFormattingOrContext;
            context = formattingOrContext || this.globalContext;
          } else {
            defaultText = defaultNumOrFormatting;

            if (typeof numOrFormattingOrContext === "number") {
              num = numOrFormattingOrContext;
              formatting = formattingOrContext;
              context = context;
            } else {
              num = null;
              formatting = numOrFormattingOrContext;
              context = formattingOrContext || this.globalContext;
            }
          }
        }

        if (isObject(text)) {
          if (isObject(text['i18n'])) {
            text = text['i18n'];
          }

          return this.translateHash(text, context);
        } else {
          return this.translateText(text, num, formatting, context, defaultText);
        }
      };

      Translator.prototype.add = function (d) {
        var c, i, k, len, ref, ref1, results, v;

        if (d.values != null) {
          ref = d.values;

          for (k in ref) {
            v = ref[k];
            this.data.values[k] = v;
          }
        }

        if (d.contexts != null) {
          ref1 = d.contexts;
          results = [];

          for (i = 0, len = ref1.length; i < len; i++) {
            c = ref1[i];
            results.push(this.data.contexts.push(c));
          }

          return results;
        }
      };

      Translator.prototype.setContext = function (key, value) {
        return this.globalContext[key] = value;
      };

      Translator.prototype.clearContext = function (key) {
        return this.lobalContext[key] = null;
      };

      Translator.prototype.reset = function () {
        this.data = {
          values: {},
          contexts: []
        };
        return this.globalContext = {};
      };

      Translator.prototype.resetData = function () {
        return this.data = {
          values: {},
          contexts: []
        };
      };

      Translator.prototype.resetContext = function () {
        return this.globalContext = {};
      };

      Translator.prototype.translateHash = function (hash, context) {
        var k, v;

        for (k in hash) {
          v = hash[k];

          if (typeof v === "string") {
            hash[k] = this.translateText(v, null, null, context);
          }
        }

        return hash;
      };

      Translator.prototype.translateText = function (text, num, formatting, context, defaultText) {
        var contextData, result;

        if (context == null) {
          context = this.globalContext;
        }

        if (this.data == null) {
          return this.useOriginalText(defaultText || text, num, formatting);
        }

        contextData = this.getContextData(this.data, context);

        if (contextData != null) {
          result = this.findTranslation(text, num, formatting, contextData.values, defaultText);
        }

        if (result == null) {
          result = this.findTranslation(text, num, formatting, this.data.values, defaultText);
        }

        if (result == null) {
          return this.useOriginalText(defaultText || text, num, formatting);
        }

        return result;
      };

      Translator.prototype.findTranslation = function (text, num, formatting, data) {
        var a, b, c, d, e, i, len, result, triple, value;
        value = data[text];

        if (value == null) {
          return null;
        }

        if (num == null && !Array.isArray(value)) {
          if (typeof value === "string") {
            return this.applyFormatting(value, num, formatting);
          }
        } else {
          if (value instanceof Array || value.length) {
            a = num === null;

            for (i = 0, len = value.length; i < len; i++) {
              triple = value[i];
              b = triple[0] === null;
              c = triple[1] === null;
              d = num >= triple[0];
              e = num <= triple[1];

              if (a && b && c || !a && (!b && d && (c || e) || b && !c && e)) {
                result = this.applyFormatting(triple[2].replace("-%n", String(-num)), num, formatting);
                return this.applyFormatting(result.replace("%n", String(num)), num, formatting);
              }
            }
          }
        }

        return null;
      };

      Translator.prototype.getContextData = function (data, context) {
        var c, equal, i, key, len, ref, ref1, value;

        if (data.contexts == null) {
          return null;
        }

        ref = data.contexts;

        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          equal = true;
          ref1 = c.matches;

          for (key in ref1) {
            value = ref1[key];
            equal = equal && value === context[key];
          }

          if (equal) {
            return c;
          }
        }

        return null;
      };

      Translator.prototype.useOriginalText = function (text, num, formatting) {
        if (num == null) {
          return this.applyFormatting(text, num, formatting);
        }

        return this.applyFormatting(text.replace("%n", String(num)), num, formatting);
      };

      Translator.prototype.applyFormatting = function (text, num, formatting) {
        var ind, regex;

        for (ind in formatting) {
          regex = new RegExp("%{" + ind + "}", "g");
          text = text.replace(regex, formatting[ind]);
        }

        return text;
      };

      return Translator;
    }();

    translator = new Translator();
    i18n = translator.translate;
    i18n.translator = translator;

    i18n.create = function (data) {
      var trans;
      trans = new Translator();

      if (data != null) {
        trans.add(data);
      }

      trans.translate.create = i18n.create;
      return trans.translate;
    };

    return i18n;
  });
}).call(void 0);
"use strict";

var btnBrush = document.getElementById("btnBrush");
var btnBlur = document.getElementById("btnBlur");
var btnAddLayer = document.getElementById("btnLayerAdd");
var divLayers = document.getElementById("layers");
var canvasAll = document.getElementById('paint');
var btnColor = document.getElementById('btnColor');
var size = document.getElementById('size');
var btnDel;
var radios;
var countLayer = 0;
var currentActiveLayer = 0;
var nameLayer = [{
  key: 0,
  value: "Background layer"
}, {
  key: 1,
  value: "First layer"
}, {
  key: 2,
  value: "Second layer"
}, {
  key: 3,
  value: "Third layer"
}];
var myCanvas = new LayeredCanvas("paint");
var mouse = {
  x: 0,
  y: 0
};
var mouseStart = {
  x: 0,
  y: 0
};
var draw = false;

function drawMove(e) {
  if (draw === true) {
    drawOnCurrentLayer(e);
  }
}

function drawFalse() {
  draw = false;
}

function drawTrue(e) {
  draw = true;
  mouseStart.x = e.pageX - canvasAll.offsetLeft;
  mouseStart.y = e.pageY - canvasAll.offsetTop;
}

myCanvas.canvas.addEventListener("mousedown", drawTrue);
myCanvas.canvas.addEventListener("mousemove", drawMove);
myCanvas.canvas.addEventListener("mouseup", drawFalse);
btnBrush.addEventListener("click", changeActiveBrush);
btnBlur.addEventListener("click", changeActiveBlur);
btnAddLayer.addEventListener("click", addLayer);

function getCurrentLayer(event) {
  currentActiveLayer = +event.target.id;
  myCanvas.getLayer(currentActiveLayer);
}

function changeActiveBrush() {
  if (btnBrush.dataset.flag === "off") {
    console.log(btnBrush);
    btnBrush.dataset.flag = "on";
    btnBrush.classList.add("button-wrapper__btn--active");
  } else {
    btnBrush.dataset.flag = "off";
    btnBrush.classList.toggle("button-wrapper__btn--active");
  }
}

function changeActiveBlur() {
  if (btnBlur.dataset.flag === "off") {
    console.log(btnBrush);
    btnBlur.dataset.flag = "on";
    btnBlur.classList.add("button-wrapper__btn--active");
  } else {
    btnBlur.dataset.flag = "off";
    btnBlur.classList.toggle("button-wrapper__btn--active");
  }
}

function LayeredCanvas(id) {
  this.layers = [];

  var extend = function extend(defaults, options) {
    var extended = {},
        prop;

    for (prop in defaults) {
      if (Object.prototype.hasOwnProperty.call(defaults, prop)) extended[prop] = defaults[prop];
    }

    for (prop in options) {
      if (Object.prototype.hasOwnProperty.call(options, prop)) extended[prop] = options[prop];
    }

    return extended;
  };

  this.addLayer = function (obj) {
    var layer = extend({
      id: Math.random().toString(36).substr(2, 5),
      show: true,
      render: function render(canvas, ctx) {}
    }, obj);

    if (this.getLayer(layer.id) !== false) {
      console.log("Layer already exists");
      console.log(obj);
      return false;
    }

    this.layers.push(layer);
    return this;
  };

  this.getLayer = function (id) {
    var length = this.layers.length;

    for (var i = 0; i < length; i++) {
      if (this.layers[i].id === id) return this.layers[i];
    }

    return false;
  };

  this.removeLayer = function (id) {
    var length = this.layers.length;

    for (var i = 0; i < length; i++) {
      if (this.layers[i].id === id) {
        var removed = this.layers[i];
        this.layers.splice(i, 1);
        return removed;
      }
    }

    return false;
  };

  this.render = function () {
    var canvas = this.canvas;
    var ctx = this.ctx2d;
    this.layers.forEach(function (item, index, array) {
      if (item.show) item.render(canvas, ctx);
    });
  };

  this.canvas = document.getElementById(id);
  this.ctx2d = this.canvas.getContext("2d");
}

function addLayer() {
  addCurrentLayerButton(countLayer, nameLayer);
  radios = document.querySelectorAll('input[type=radio][name="radioLayer"]');
  btnDel = document.querySelectorAll(".current-button-delete-layer");
  myCanvas.addLayer({
    id: countLayer++,
    render: function render(canvas, ctx) {
      if (countLayer === 0) {
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }
    }
  });
  myCanvas.render();
  radios.forEach(function (el) {
    el.addEventListener("click", getCurrentLayer);
  });
  btnDel.forEach(function (el) {
    el.addEventListener("click", deleteCurrentLayer);
  });
}

function deleteCurrentLayer(e) {
  var curLayers = document.getElementsByClassName("layers__curLayer");

  for (var i = 0; i < curLayers.length; i++) {
    if (curLayers[i].dataset.flag === e.target.value) {
      divLayers.removeChild(curLayers[i]);
    }
  }

  myCanvas.removeLayer(+e.target.value);
  countLayer--;
  myCanvas.render();
}

function addCurrentLayerButton(count, arrName) {
  var curAddLayer = document.createElement("div");
  var curLabel = document.createElement("label");
  var curInputRadio = document.createElement("input");
  var curLabelNameLayer = document.createElement("label");
  var curButtonDelLayer = document.createElement("button");
  curAddLayer.dataset.flag = count;
  curInputRadio.type = "radio";
  curInputRadio.name = "radioLayer";

  if (count === 0) {
    curInputRadio.checked = true;
    curInputRadio.id = count;
    curLabelNameLayer.innerHTML = arrName[0].value;
  } else {
    curInputRadio.checked = false;
    curInputRadio.id = count;
    curLabelNameLayer.innerHTML = arrName[count].value;
  }

  curLabel.innerHTML = count;
  curAddLayer.classList.add("layers__curLayer");
  curButtonDelLayer.classList.add("current-button-delete-layer");
  curButtonDelLayer.value = count;
  curAddLayer.appendChild(curLabel);
  curAddLayer.appendChild(curInputRadio);
  curAddLayer.appendChild(curLabelNameLayer);
  curAddLayer.appendChild(curButtonDelLayer);
  divLayers.appendChild(curAddLayer);
}

function drawOnCurrentLayer(e) {
  var currentLayer = myCanvas.getLayer(currentActiveLayer);
  mouse.x = e.pageX - canvasAll.offsetLeft;
  mouse.y = e.pageY - canvasAll.offsetTop;

  currentLayer.render = function (canvas, ctx) {
    ctx.strokeStyle = btnColor.value;
    ctx.lineWidth = size.value;
    ctx.lineTo(mouse.x, mouse.y);
    ctx.stroke();
  };

  myCanvas.render();
}
"use strict";

var contentDropDownThemeElem = document.querySelector(".dropdown-content_theme");
var contentDropDownLangElem = document.querySelector(".dropdown-content_lang");
var btnDropDownElem = document.querySelector(".dropbtn-settings");
var DropDownSetElem = document.querySelector(".dropdown-content-settings");
var langObj = i18n.create({
  values: {
    "Settings": "Settings",
    "Theme": "Theme",
    "Lang": "Lang",
    "Sheet": "Sheet",
    "AddBtn": "add"
  }
});
DropDownSetElem.addEventListener("click", function (event) {
  var DropDownContentThemeElem = document.querySelector(".dropdown-content_theme");
  var target = event.target;

  if (target.dataset.id === "theme") {
    contentDropDownThemeElem.classList.toggle("active");
    contentDropDownLangElem.classList.remove("active");
    DropDownContentThemeElem.addEventListener("click", function (event) {
      var target = event.target;

      if (target.dataset.id === "dark") {
        changeTheme('./css/dark-theme.css');
      }

      if (target.dataset.id === "light") {
        changeTheme('./css/light-theme.css');
      }
    });
  }

  if (target.dataset.id === "lang") {
    contentDropDownLangElem.classList.toggle("active");
    contentDropDownThemeElem.classList.remove("active");
    document.querySelector(".dropdown-content_lang").addEventListener("click", function (event) {
      var target = event.target;

      if (target.dataset.id === "eng") {
        langObj = i18n.create({
          values: {}
        });
        changeLange();
      }

      if (target.dataset.id === "rus") {
        langObj = i18n.create({
          values: {
            "Settings": "Настройки",
            "Theme": "Тема",
            "Lang": "Язык",
            "add": "добавить",
            "Dark": "Темная",
            "Light": "Светлая",
            "Eng": "Анг",
            "Rus": "Рус",
            "Size:": "Размер:",
            "Paint on Canvas": "Рисунок на холсте)",
            "Brush": "Кисть",
            "Blur": "Размытие",
            "Layout panel": "Слои",
            "Add layer": "Добавить слой",
            "Figures panel": "Фигуры"
          }
        });
        changeLange();
      }
    });
  }
});
document.addEventListener("click", function (event) {
  var dropdownBlock = DropDownSetElem.parentElement;

  if (dropdownBlock.classList.contains("active")) {
    var isClosestActive = event.target.closest(".dropdown.active");

    if (!isClosestActive) {
      dropdownBlock.classList.remove("active");
      contentDropDownThemeElem.classList.remove("active");
      contentDropDownLangElem.classList.remove("active");
    }
  }
});

function changeLange() {
  var langElems = document.querySelectorAll("[data-lang]");
  langElems.forEach(function (elem) {
    elem.innerHTML = langObj(elem.dataset.lang);
  });
}

function changeTheme(href) {
  var head = document.getElementsByTagName('head')[0];
  var cssId = 'theme'; // you could encode the css path itself to generate id..

  if (document.getElementById(cssId)) {
    head.removeChild(document.getElementById(cssId));
  }

  if (!document.getElementById(cssId)) {
    var link = document.createElement('link');
    link.id = cssId;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    link.href = href;
    link.media = 'all';
    head.appendChild(link);
  }
}

btnDropDownElem.addEventListener("click", function (event) {
  event.target.closest(".dropdown").classList.toggle("active");
  contentDropDownThemeElem.classList.remove("active");
  contentDropDownLangElem.classList.remove("active");
});